#!/usr/bin/perl

################################################################
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#  http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
#
################################################################

use strict;
use Getopt::Long;
use File::Path qw(remove_tree);
use File::Glob;
use File::Find;

use vars qw/ %opt /;


##########################################################################
# PrintHelp(): Prints the script usage.
##########################################################################

my $cmd;
my $logfile = "run.log";
my $simulator;
my @defines;
my @filelists;
my $uvm;
my @simargs;
my $clean;
my $help;

sub usage () {
  print "Usage:  runSVUnit -s|sim <simulator> [-c|clean -l|log <log> -d|define <macro> -f|filelist <file> -uvm]\n";
  print "  -s|sim <simulator>     : simulator is either of questa, ius or vcs\n";
  print "  -l|log <log>           : simulation log file (default: run.log)\n";
  print "  -d|define <macro>      : appended to the command line as +define+<macro>\n";
  print "  -f|filelist <file>     : some verilog file list\n";
  print "  -uvm                   : run SVUnit with UVM\n";
  print "  -simarg                : add a runtime argument to the command line\n";
  print "  -c|clean               : run SVUnit from a clean build\n";
  print "  -h|help                : prints this help screen\n";
  print "\n";
  exit 1;
}

sub clean () {
print "BONGO\n";
  find({
      wanted => sub {
                      if (/.*testsuite\.sv$/   or
                          /.*testrunner\.sv$/
                      ) {
                        unlink;
                      }
                    }
    }, qw( . ));

  unlink qw( run.log .svunit.f vsim.wlf ncsc.log irun.key );
  remove_tree qw( work  INCA_libs );
}

# command line options
GetOptions("l|log=s" => \$logfile,
           "s|sim=s" => \$simulator,
           "d|define=s" => \@defines,
           "f|filelist=s" => \@filelists,
           "uvm" => \$uvm,
           "simarg=s" => \@simargs,
           "c|clean" => \$clean,
           "h|help" => \$help
           ) or usage();

usage() if $help;

clean() if $clean;

# version
my $VERSION = IO::File->new();
$VERSION->open("$ENV{SVUNIT_INSTALL}/VERSION.txt") || die;
my $version = $VERSION->getline;
chomp $version;
push @defines, qq!SVUNIT_VERSION='"$version"'!;

# filelists
unshift @filelists, qw( .svunit.f );

# simulator check
$simulator =~ tr/A-Z/a-z/;
$simulator =~ s/questa/qverilog/;
$simulator =~ s/ius/irun/;
usage() if $simulator ne "qverilog" &&
           $simulator ne "irun" &&
           $simulator ne "modelsim" &&
           $simulator ne "vcs";

# start the command line
if ($simulator eq "modelsim") {
  $cmd = "vlib work; ";
  $cmd .= "vlog ";
} else {
  $cmd = "$simulator -l $logfile";
}

# add the uvm switches if necessary
if (defined $uvm) {
  $cmd .= " -uvm" if $simulator eq "irun";
  $cmd .= " -ntb_opts uvm" if $simulator eq "vcs";
  $cmd .= " -uvm" if $simulator eq "irun";
  push @defines, "RUN_SVUNIT_WITH_UVM";
}

# add the filelists and defines
$cmd .= " -f " . join "  -f ", @filelists;
$cmd .= " +define+" . join " +define+", @defines if (@defines > 0);

if ($simulator eq "modelsim") {
  $cmd .= qq!; vsim -lib work -c -do "run -all; quit" -l $logfile testrunner! if $simulator eq "modelsim";
}

$cmd .= " -R " . join (" ", @simargs ) . " -" if (@simargs > 0);

# run!!
system("buildSVUnit");
print $cmd;
system("$cmd");
