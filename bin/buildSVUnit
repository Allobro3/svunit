#!/usr/bin/perl

################################################################
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#  http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
#
################################################################

use strict;
use Cwd;
use IO::File;
use IO::Dir;
use File::Glob;
use File::Find;


my $pwd = ".";
my $g_found_unit_test = 0;


##########################################################################
# PrintHelp(): Prints the script usage.
##########################################################################
sub PrintHelp() {
  print "\n";
  print "Usage:  create_svunit.pl [ -help ]\n\n";
  print "Where -help               : prints this help screen\n";
  print "\n";
  die;
}


sub CheckArgs() {
  my $numargs = @ARGV;

  for my $i (0..$numargs-1) {
    if ( my $skip == 1 ) {
      $skip = 0;
    }
    else {
      if ( $ARGV[$i] =~ /(-help)|(-h)/ ) {
        PrintHelp();
      }
    }
  }
}

#############################################
# sub buildTestrunner(@)
#
# build/run the testrunner commandline with
# all the testsuites
#############################################
sub buildTestrunner
{
  my $cmd = "create_testrunner.pl -overwrite -out testrunner.sv";

  find({
      wanted => sub { $cmd .= " -add $_" if /\..*_testsuite.sv/ },
      no_chdir => 1
    }, qw( . ));

  system($cmd);
  system("mv testrunner.sv .testrunner.sv");
}

#############################################
# sub buildTestsuite($)
#
# recursively go through the directory tree,
# collect all the unit tests and write the
# Makefiles
#############################################
sub buildTestsuite
{
  my $dir = shift;
  my @unittest;
  my $parentDir;

  my $dirID = $dir;
  $dirID =~ s/[\/\.-]/_/g;
  $dirID = "." . $dirID;

  @unittest = <$dir/*_unit_test.sv>;

  # create the testsuite for this directory
  if (@unittest > 0) {
    my $cmd = "create_testsuite.pl -overwrite -out $dir/$dirID\_testsuite.sv";
    foreach my $unittest (@unittest) {
      $cmd .= " -add $unittest";
    }
    system($cmd);
  }

  # recursively do the same through sub-directories
  foreach (@_ = <$dir/*>) {
    if (-d "$_" && !m/\.$/) {
      buildTestsuite("$_");
    }
  }
}

CheckArgs();
buildTestsuite($pwd);
buildTestrunner();

exit 0;
#print "Info: Found no unit tests. No SVUnit framework created.\n";
#exit 1;
