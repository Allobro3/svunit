import svunit_pkg::*;

module testrunner();
  string name = "testrunner";
  svunit_testrunner svunit_tr;

  //==================================
  // These are the test suites that we
  // want included in this testrunner
  //==================================
  PWD_testsuite PWD_ts();
  PWD_subdir0_testsuite PWD_subdir0_ts();
  PWD_subdir1_subdir1a_testsuite PWD_subdir1_subdir1a_ts();
  PWD_subdir1_testsuite PWD_subdir1_ts();


  //===================================
  // Main
  //===================================
  initial
  begin
    build();
    run();
    $finish();
  end


  //===================================
  // Build
  //===================================
  function void build();
    svunit_tr = new(name);
    PWD_ts.build();
    svunit_tr.add_testsuite(PWD_ts.svunit_ts);
    PWD_subdir0_ts.build();
    svunit_tr.add_testsuite(PWD_subdir0_ts.svunit_ts);
    PWD_subdir1_subdir1a_ts.build();
    svunit_tr.add_testsuite(PWD_subdir1_subdir1a_ts.svunit_ts);
    PWD_subdir1_ts.build();
    svunit_tr.add_testsuite(PWD_subdir1_ts.svunit_ts);
  endfunction


  //===================================
  // Run
  //===================================
  task run();
    PWD_ts.run();
    PWD_subdir0_ts.run();
    PWD_subdir1_subdir1a_ts.run();
    PWD_subdir1_ts.run();
    svunit_tr.report();
  endtask


  //===================================
  // UVM test hooks
  //===================================
  `ifdef RUN_SVUNIT_WITH_UVM
    import svunit_uvm_mock_pkg::*;
    initial
    begin
      svunit_uvm_test_inst("svunit_uvm_test");
    end
  `endif
endmodule
